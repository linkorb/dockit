<?php

namespace DockIt\Model;

use Symfony\Component\Process\Process;
use RuntimeException;

class Deployment
{
    protected $name;
    protected $app;
    protected $host;
    protected $parameters = [];

    public function setName($name)
    {
        $this->name = $name;
    }
    public function getName()
    {
        return $this->name;
    }

    public function setApp(App $app)
    {
        $this->app = $app;
    }
    public function getApp()
    {
        return $this->app;
    }

    public function setHost(Host $host)
    {
        $this->host = $host;
    }
    public function getHost()
    {
        return $this->host;
    }

    public function setParameters($parameters)
    {
        $this->parameters = $parameters;
    }
    public function getParameters()
    {
        return $this->parameters;
    }

    public function getRemotePath()
    {
        return '/deployment/' . $this->getName();
    }

    public function ensureRemotePath($subPath = '')
    {
        $host = $this->getHost();
        $ssh = $host->getSsh();

        // Ensure remotePath
        $res = $ssh->exec(
            [
                'sudo',
                'mkdir',
                '-p',
                $this->getRemotePath() . $subPath
            ]
        );
        if (!$res->getExitCode()==0){
            throw new RuntimeException("Failed to ensure remote path");
        }
        $res = $ssh->exec(
            [
                'sudo',
                'chmod',
                '777',
                $this->getRemotePath() . $subPath
            ]
        );
        if (!$res->getExitCode()==0){
            throw new RuntimeException("Failed to set permissions remote path " . $subPath);
        }
    }

    public function validateParameters()
    {
        foreach ($this->parameters as $key=>$value) {
            if (!$this->app->hasParameter($key)) {
                throw new RuntimeException(
                    "Deployment parameter '" .
                    $key .
                    "' undefined in app (" . $this->app->getName() . ')'
                );
            }
        }

        foreach ($this->app->getParameters() as $key=>$parameter) {
            if (!isset($this->parameters[$key])) {
                if (isset($parameter['required'])) {
                    if ($parameter['required']=='true') {
                        throw new RuntimeException("Missing required deployment parameter: " . $key);
                    }
                }
                if (isset($parameter['default'])) {
                    $this->parameters[$key] = $parameter['default'];
                }
            }
        }
    }

    public function copyEnv()
    {
        //$env = "Hello=world\nhihi=haha";
        $env = "# generated by dockit\n";
        ksort($this->parameters);
        foreach ($this->parameters as $key=>$value) {
            $env .= $key . '=' . $value . "\n";
        }
        $filename = tempnam('/tmp', 'dockit-env');
        file_put_contents($filename, $env);

        $host = $this->getHost();
        $scp = $host->getScp();

        $dest = $this->getRemotePath() ;
        $res = $scp->copy(
            $filename,
            $scp->getRemotePath($dest . '/.env')
        );
        if ($res->getExitCode()!=0) {
            throw new RuntimeException("Failed to copy .env");
        }
        unlink($filename);
    }

    public function copyAppFiles()
    {
        $host = $this->getHost();
        $scp = $host->getScp();

        $source = $this->getApp()->getLocalPath();
        $dest = $this->getRemotePath();

        $iterator = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator($source, \RecursiveDirectoryIterator::SKIP_DOTS),
            \RecursiveIteratorIterator::SELF_FIRST
        );

        foreach ($iterator as $item) {
            if ($item->isDir()) {
                $dir = $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
                $this->ensureRemotePath(DIRECTORY_SEPARATOR . $iterator->getSubPathName());
            } else {
                $filename = $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
                echo "Writing " . $host->getUsername() . '@' . $host->getName() . ':' . $filename . "\n";

                $content = file_get_contents($item);
                $tmpfile = tempnam('/tmp', 'dockit-template-');
                if (basename($item)!='docker-compose.yml') {
                    foreach ($this->parameters as $key => $value) {
                        $content = str_replace('${' . $key . '}', $value, $content);
                    }
                }
                file_put_contents($tmpfile, $content);

                $res = $scp->copy(
                    $tmpfile,
                    $scp->getRemotePath($filename)
                );
                unlink($tmpfile);
                if ($res->getExitCode()!=0) {
                    throw new RuntimeException("Failed to copy $filename");
                }
            }
        }
    }


    public function diffAppFiles($output)
    {
        $host = $this->getHost();
        $scp = $host->getScp();

        $source = $this->getApp()->getLocalPath();
        $dest = $this->getRemotePath();

        $iterator = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator($source, \RecursiveDirectoryIterator::SKIP_DOTS),
            \RecursiveIteratorIterator::SELF_FIRST
        );

        foreach ($iterator as $item) {
            if ($item->isDir()) {
                $dir = $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
            } else {
                $filename = $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
                $output->writeLn("<comment>Comparing " . $item . "</comment>");

                $tmpfile = tempnam('/tmp', 'dockit-');
                $tmpfile2 = tempnam('/tmp', 'dockit-template-');

                $res = $scp->copy(
                    $scp->getRemotePath($filename),
                    $tmpfile
                );
                if ($res->getExitCode()!=0) {
                    $output->writeln("<info>NEW FILE: $filename</info>");
                } else {
                    $remoteContent = file_get_contents($tmpfile);
                    $localContent = file_get_contents($item);

                    if (basename($item)!='docker-compose.yml') {
                        foreach ($this->parameters as $key => $value) {
                            $localContent = str_replace('${' . $key . '}', $value, $localContent);
                        }
                    }
                    file_put_contents($tmpfile2, $localContent);


                    $process = new Process('colordiff -U3 -w ' . $tmpfile . ' ' . $tmpfile2);
                    $process->run();
                    echo $process->getOutput();
                    echo $process->getErrorOutput();
                    unlink($tmpfile);
                }
            }
        }
    }
}
